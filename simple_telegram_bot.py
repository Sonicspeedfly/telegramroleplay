#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç "–•—Ä–æ–Ω–∏–∫–∏ –ù–µ–π–∫–æ–Ω–∞" –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import json
import logging
import requests
import time
from datetime import datetime
from typing import Dict
import google.generativeai as genai

import google.generativeai as genai
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SimpleTelegramBot:
    def __init__(self):
        self.system_prompt = ""
        self.gemini_api_key = ""
        self.telegram_token = ""
        self.model = None
        self.user_sessions: Dict[int, Dict] = {}
        self.base_url = "https://api.telegram.org/bot"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.load_config()
        self.load_settings()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini
        self.initialize_gemini()
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.json"""
        try:
            with open('config.json', 'r', encoding='utf-8') as f:
                config = json.load(f)
                self.system_prompt = config.get('system_prompt', '')
        except FileNotFoundError:
            logger.error("–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            raise
        except json.JSONDecodeError:
            logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config.json!")
            raise
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ settings.json"""
        try:
            with open('settings.json', 'r', encoding='utf-8') as f:
                settings = json.load(f)
                self.gemini_api_key = settings.get('gemini_api_key', '')
                self.telegram_token = settings.get('telegram_token', '')
        except FileNotFoundError:
            logger.error("–§–∞–π–ª settings.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            raise
        except json.JSONDecodeError:
            logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è settings.json!")
            raise
    
    def initialize_gemini(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini API"""
        if not self.gemini_api_key:
            logger.warning("API –∫–ª—é—á Gemini –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
        
        try:
            genai.configure(api_key=self.gemini_api_key)
            self.model = genai.GenerativeModel('gemini-2.5-pro')
            logger.info("Gemini API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini API: {e}")
    
    def get_user_session(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {
                'chat_history': [],
                'current_game': None,
                'last_activity': datetime.now(),
                'files': [],  # –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                'images': []   # –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            }
        return self.user_sessions[user_id]
    
    def send_message(self, chat_id: int, text: str, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API"""
        url = f"{self.base_url}{self.telegram_token}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'Markdown'
        }
        if reply_markup:
            data['reply_markup'] = json.dumps(reply_markup)
        
        try:
            response = requests.post(url, json=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    def send_chat_action(self, chat_id: int, action: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —á–∞—Ç–∞"""
        url = f"{self.base_url}{self.telegram_token}/sendChatAction"
        data = {
            'chat_id': chat_id,
            'action': action
        }
        
        try:
            requests.post(url, json=data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —á–∞—Ç–∞: {e}")
    
    def get_updates(self, offset=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
        url = f"{self.base_url}{self.telegram_token}/getUpdates"
        params = {'timeout': 30}
        if offset:
            params['offset'] = offset
        
        try:
            response = requests.get(url, params=params)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return None
    
    def get_file(self, file_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ"""
        url = f"{self.base_url}{self.telegram_token}/getFile"
        params = {'file_id': file_id}
        
        try:
            response = requests.get(url, params=params)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
            return None
    
    def download_file(self, file_path):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        url = f"https://api.telegram.org/file/bot{self.telegram_token}/{file_path}"
        
        try:
            response = requests.get(url)
            return response.content
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return None
    
    def extract_text_from_document(self, file_content, file_name):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            file_ext = file_name.lower().split('.')[-1]
            
            if file_ext in ['txt', 'md']:
                # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
                return file_content.decode('utf-8', errors='ignore')
            
            elif file_ext in ['pdf']:
                # PDF —Ñ–∞–π–ª—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º PyPDF2 –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                try:
                    import PyPDF2
                    import io
                    pdf_file = io.BytesIO(file_content)
                    pdf_reader = PyPDF2.PdfReader(pdf_file)
                    text = ""
                    for page in pdf_reader.pages:
                        text += page.extract_text() + "\n"
                    return text
                except ImportError:
                    return "PDF —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –Ω–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –Ω—É–∂–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ PyPDF2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install PyPDF2"
            
            elif file_ext in ['docx']:
                # DOCX —Ñ–∞–π–ª—ã
                try:
                    from docx import Document
                    import io
                    doc = Document(io.BytesIO(file_content))
                    text = ""
                    for paragraph in doc.paragraphs:
                        text += paragraph.text + "\n"
                    return text
                except ImportError:
                    return "DOCX —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –Ω–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –Ω—É–∂–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-docx. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-docx"
            
            else:
                return f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_ext}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: txt, md, pdf, docx"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"
    
    def save_file_to_memory(self, user_id: int, file_info: dict, file_content: bytes, file_type: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        session = self.get_user_session(user_id)
        
        file_data = {
            'name': file_info.get('name', 'unknown'),
            'type': file_type,
            'content': file_content,
            'description': file_info.get('description', ''),
            'timestamp': datetime.now().isoformat(),
            'size': len(file_content)
        }
        
        if file_type == 'document':
            session['files'].append(file_data)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if len(session['files']) > 10:
                session['files'] = session['files'][-10:]
        elif file_type == 'image':
            session['images'].append(file_data)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if len(session['images']) > 10:
                session['images'] = session['images'][-10:]
    
    def get_memory_context(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        session = self.get_user_session(user_id)
        context = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        if session['files']:
            context += "\nüìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n"
            for i, file_data in enumerate(session['files'], 1):
                context += f"{i}. {file_data['name']}"
                if file_data['description']:
                    context += f" - {file_data['description']}"
                context += f" ({file_data['timestamp'][:10]})\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
        if session['images']:
            context += "\nüñºÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n"
            for i, image_data in enumerate(session['images'], 1):
                context += f"{i}. {image_data['name']}"
                if image_data['description']:
                    context += f" - {image_data['description']}"
                context += f" ({image_data['timestamp'][:10]})\n"
        
        return context
    
    def answer_callback_query(self, callback_query_id: str, text: str = None):
        """–û—Ç–≤–µ—Ç –Ω–∞ callback query"""
        url = f"{self.base_url}{self.telegram_token}/answerCallbackQuery"
        data = {'callback_query_id': callback_query_id}
        if text:
            data['text'] = text
        
        try:
            requests.post(url, json=data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")
    
    def handle_start_command(self, chat_id: int, user_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = f"""
üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–•—Ä–æ–Ω–∏–∫–∏ –ù–µ–π–∫–æ–Ω–∞", {user_name}!

–Ø ‚Äî –ù–µ–π–∫–æ–Ω, –≤–∞—à –ò–ò-–ú–∞—Å—Ç–µ—Ä –ò–≥—Ä—ã –¥–ª—è —Ä–æ–ª–µ–≤—ã—Ö –∏–≥—Ä. 

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/new - –ù–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è
/help - –ü–æ–º–æ—â—å

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–æ–ª–µ–≤—É—é –∏–≥—Ä—É!
        """
        
        keyboard = {
            'inline_keyboard': [
                [{'text': 'üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞', 'callback_data': 'new_game'}],
                [{'text': 'üìö –ü–æ–º–æ—â—å', 'callback_data': 'help'}]
            ]
        }
        
        self.send_message(chat_id, welcome_text, keyboard)
    
    def handle_help_command(self, chat_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üéÆ **–•—Ä–æ–Ω–∏–∫–∏ –ù–µ–π–∫–æ–Ω–∞ - –ü–æ–º–æ—â—å**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/new - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
/memory - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**
1. –ù–∞–∂–º–∏—Ç–µ "–ù–æ–≤–∞—è –∏–≥—Ä–∞" –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /new
2. –û–ø–∏—à–∏—Ç–µ, –≤ –∫–∞–∫—É—é —Ä–æ–ª–µ–≤—É—é –∏–≥—Ä—É —Ö–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å
3. –ù–µ–π–∫–æ–Ω —Å–æ–∑–¥–∞—Å—Ç –º–∏—Ä –∏ –Ω–∞—á–Ω–µ—Ç –∏–≥—Ä—É
4. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è

**üìÑ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**
- –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (PDF, DOCX, TXT, MD)
- –ù–µ–π–∫–æ–Ω –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
- –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20MB

**üñºÔ∏è –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**
- –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–ª–∏ –±–µ–∑
- –ù–µ–π–∫–æ–Ω –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –µ–≥–æ –≤ —Ä–æ–ª–µ–≤—É—é –∏–≥—Ä—É
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20MB

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
- üìÑ PDF (.pdf)
- üìù Word (.docx)
- üìÑ –¢–µ–∫—Å—Ç (.txt, .md)
- üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG, GIF)

**üíæ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–∞–º—è—Ç—å:**
- –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
- –ù–µ–π–∫–æ–Ω –ø–æ–º–Ω–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /memory –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
- –ü–∞–º—è—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–≥—Ä—ã

**–ü—Ä–∏–º–µ—Ä—ã –∏–≥—Ä:**
- –§—ç–Ω—Ç–µ–∑–∏ (—ç–ª—å—Ñ—ã, –¥—Ä–∞–∫–æ–Ω—ã, –º–∞–≥–∏—è)
- –ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ (–∫–æ—Å–º–æ—Å, —Ä–æ–±–æ—Ç—ã)
- –î–µ—Ç–µ–∫—Ç–∏–≤ (—Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –∑–∞–≥–∞–¥–∫–∏)

–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üé≤
        """
        self.send_message(chat_id, help_text)
    
    def handle_new_command(self, chat_id: int, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /new"""
        session = self.get_user_session(user_id)
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        session['chat_history'] = []
        session['current_game'] = None
        
        message = (
            "üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –û–ø–∏—à–∏—Ç–µ, –≤ –∫–∞–∫—É—é —Ä–æ–ª–µ–≤—É—é –∏–≥—Ä—É —Ö–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ '–•–æ—á—É –±—ã—Ç—å —ç–ª—å—Ñ–æ–º-–º–∞–≥–æ–º –≤ —Ñ—ç–Ω—Ç–µ–∑–∏ –º–∏—Ä–µ'\n"
            "‚Ä¢ '–ù–∞—á–Ω–µ–º –∫–æ—Å–º–∏—á–µ—Å–∫—É—é –æ–ø–µ—Ä—É, —è –∫–∞–ø–∏—Ç–∞–Ω –∫–æ—Ä–∞–±–ª—è'\n"
            "‚Ä¢ '–î–µ—Ç–µ–∫—Ç–∏–≤ –≤ –ù—å—é-–ô–æ—Ä–∫–µ 1940-—Ö –≥–æ–¥–æ–≤'"
        )
        
        self.send_message(chat_id, message)
    
    def handle_memory_command(self, chat_id: int, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /memory"""
        session = self.get_user_session(user_id)
        
        memory_context = self.get_memory_context(user_id)
        if memory_context:
            message = f"üíæ **–ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n{memory_context}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–≥—Ä–µ!"
        else:
            message = "üíæ –ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –ø–∞–º—è—Ç–∏."
        
        self.send_message(chat_id, message)
    
    def handle_callback_query(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query"""
        chat_id = callback_query['message']['chat']['id']
        user_id = callback_query['from']['id']
        callback_data = callback_query['data']
        callback_id = callback_query['id']
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        self.answer_callback_query(callback_id)
        
        if callback_data == "new_game":
            self.handle_new_command(chat_id, user_id)
        elif callback_data == "help":
            self.handle_help_command(chat_id)
    
    def handle_photo(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        chat_id = message['chat']['id']
        user_id = message['from']['id']
        user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        photos = message['photo']
        caption = message.get('caption', '')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ)
        photo = photos[-1]
        file_id = photo['file_id']
        file_size = photo.get('file_size', 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)
        if file_size > 5 * 1024 * 1024:
            self.send_message(chat_id, "‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.send_message(chat_id, f"üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        self.send_chat_action(chat_id, "typing")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = self.get_file(file_id)
            if not file_info or not file_info.get('ok'):
                self.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ")
                return
            
            file_path = file_info['result']['file_path']
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_content = self.download_file(file_path)
            if not file_content:
                self.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session = self.get_user_session(user_id)
            session['last_activity'] = datetime.now()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
            image_info = {
                'name': f"image_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg",
                'description': caption if caption else "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã"
            }
            self.save_file_to_memory(user_id, image_info, file_content, 'image')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            context_text = self.system_prompt + "\n\n"
            context_text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã.\n\n"
            
            if caption:
                context_text += f"–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {caption}\n\n"
                context_text += "–ù–µ–π–∫–æ–Ω, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–π –µ–≥–æ –≤ —Ä–æ–ª–µ–≤—É—é –∏–≥—Ä—É. –û–ø–∏—à–∏, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å, –∏ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å."
            else:
                context_text += "–ù–µ–π–∫–æ–Ω, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–π –µ–≥–æ –≤ —Ä–æ–ª–µ–≤—É—é –∏–≥—Ä—É. –û–ø–∏—à–∏, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å, –∏ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å."
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            try:
                vision_model = genai.GenerativeModel('gemini-2.5-pro')
                
                # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è Gemini
                import io
                from PIL import Image
                
                image = Image.open(io.BytesIO(file_content))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –≤ Gemini
                response = vision_model.generate_content([context_text, image])
                analysis = response.text.strip()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –∫–≤–æ—Ç—ã
                time.sleep(10)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
                photo_description = f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ{f' —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º: {caption}' if caption else ''}"
                session['chat_history'].append({
                    "role": "user", 
                    "content": photo_description
                })
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –∏—Å—Ç–æ—Ä–∏—é
                session['chat_history'].append({"role": "assistant", "content": analysis})
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
                if len(session['chat_history']) > 10:
                    session['chat_history'] = session['chat_history'][-10:]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
                self.send_message(chat_id, f"üñºÔ∏è **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n\n{analysis}")
                
            except ImportError:
                # –ï—Å–ª–∏ PIL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                self.send_message(chat_id, 
                    "‚ùå –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω—É–∂–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Pillow. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install Pillow")
                return
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É –∫–≤–æ—Ç—ã
            if "429" in str(e) or "quota" in str(e).lower():
                self.send_message(chat_id, 
                    "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Gemini API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
            else:
                self.send_message(chat_id, 
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def handle_document(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        chat_id = message['chat']['id']
        user_id = message['from']['id']
        user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        document = message['document']
        
        file_name = document.get('file_name', 'document')
        file_id = document['file_id']
        file_size = document.get('file_size', 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)
        if file_size > 5 * 1024 * 1024:
            self.send_message(chat_id, "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.send_message(chat_id, f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç: {file_name}")
        self.send_chat_action(chat_id, "typing")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = self.get_file(file_id)
            if not file_info or not file_info.get('ok'):
                self.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")
                return
            
            file_path = file_info['result']['file_path']
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_content = self.download_file(file_path)
            if not file_content:
                self.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            document_text = self.extract_text_from_document(file_content, file_name)
            
            if document_text.startswith("–û—à–∏–±–∫–∞") or document_text.startswith("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π"):
                self.send_message(chat_id, document_text)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session = self.get_user_session(user_id)
            session['last_activity'] = datetime.now()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ø–∞–º—è—Ç—å
            file_info = {
                'name': file_name,
                'description': f"–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç: {document_text[:200]}...",
                'text_content': document_text
            }
            self.save_file_to_memory(user_id, file_info, file_content, 'document')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            session['chat_history'].append({
                "role": "user", 
                "content": f"–ó–∞–≥—Ä—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç '{file_name}':\n\n{document_text[:1000]}{'...' if len(document_text) > 1000 else ''}"
            })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
            if len(session['chat_history']) > 10:
                session['chat_history'] = session['chat_history'][-10:]
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
            max_text_length = 2000  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤
            if len(document_text) > max_text_length:
                document_text = document_text[:max_text_length] + "..."
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            context_text = self.system_prompt + "\n\n"
            context_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç '{file_name}' –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            context_text += f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n{document_text}\n\n"
            context_text += "–ù–µ–π–∫–æ–Ω, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞
            response = self.model.generate_content(context_text)
            analysis = response.text.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –∫–≤–æ—Ç—ã
            time.sleep(10)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –∏—Å—Ç–æ—Ä–∏—é
            session['chat_history'].append({"role": "assistant", "content": analysis})
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
            self.send_message(chat_id, f"üìä **–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{file_name}':**\n\n{analysis}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É –∫–≤–æ—Ç—ã
            if "429" in str(e) or "quota" in str(e).lower():
                self.send_message(chat_id, 
                    "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Gemini API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
            elif "format" in str(e).lower() or "type" in str(e).lower():
                self.send_message(chat_id, 
                    "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç.")
            else:
                self.send_message(chat_id, 
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        chat_id = message['chat']['id']
        user_id = message['from']['id']
        user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        text = message['text']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        session = self.get_user_session(user_id)
        session['last_activity'] = datetime.now()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        session['chat_history'].append({"role": "user", "content": text})
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        if len(session['chat_history']) > 10:
            session['chat_history'] = session['chat_history'][-10:]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" —Å—Ç–∞—Ç—É—Å
        self.send_chat_action(chat_id, "typing")
        
        try:
            if not self.model:
                self.send_message(chat_id, 
                    "‚ùå –û—à–∏–±–∫–∞: Gemini API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. "
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context_text = self.system_prompt + "\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
            memory_context = self.get_memory_context(user_id)
            if memory_context:
                context_text += "üíæ –ü–ê–ú–Ø–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:" + memory_context + "\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            for msg in session['chat_history'][:-1]:
                if msg["role"] == "user":
                    context_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg['content']}\n"
                else:
                    context_text += f"–ù–µ–π–∫–æ–Ω: {msg['content']}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            context_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {text}\n"
            context_text += "–ù–µ–π–∫–æ–Ω:"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini
            response = self.model.generate_content(context_text)
            assistant_message = response.text.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –∫–≤–æ—Ç—ã
            time.sleep(5)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            session['chat_history'].append({"role": "assistant", "content": assistant_message})
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            self.send_message(chat_id, assistant_message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É –∫–≤–æ—Ç—ã
            if "429" in str(e) or "quota" in str(e).lower():
                self.send_message(chat_id, 
                    "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Gemini API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
            else:
                self.send_message(chat_id, 
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def process_update(self, update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if 'message' in update:
            message = update['message']
            text = message.get('text', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if 'document' in message:
                self.handle_document(message)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
            elif 'photo' in message:
                self.handle_photo(message)
            elif text.startswith('/start'):
                self.handle_start_command(message['chat']['id'], 
                                       message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'))
            elif text.startswith('/help'):
                self.handle_help_command(message['chat']['id'])
            elif text.startswith('/new'):
                self.handle_new_command(message['chat']['id'], message['from']['id'])
            elif text.startswith('/memory'):
                self.handle_memory_command(message['chat']['id'], message['from']['id'])
            else:
                self.handle_message(message)
        
        elif 'callback_query' in update:
            self.handle_callback_query(update['callback_query'])
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.telegram_token:
            logger.error("Telegram —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        offset = None
        
        while True:
            try:
                updates = self.get_updates(offset)
                if updates and updates.get('ok'):
                    for update in updates['result']:
                        self.process_update(update)
                        offset = update['update_id'] + 1
                
            except KeyboardInterrupt:
                logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                continue

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = SimpleTelegramBot()
    bot.run()

if __name__ == "__main__":
    main() 